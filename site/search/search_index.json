{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230Cuit-Wiki \u00b6 \u73b0\u5728\u53ea\u662f\u4e00\u4e2a\u6d4b\u8bd5\u9875\u9762\uff0c\u4e0d\u7528\u5173\u5fc3\u3002 \u6492\u82b1\u6492\u82b1 test","title":"\u7b80\u4ecb"},{"location":"#cuit-wiki","text":"\u73b0\u5728\u53ea\u662f\u4e00\u4e2a\u6d4b\u8bd5\u9875\u9762\uff0c\u4e0d\u7528\u5173\u5fc3\u3002 \u6492\u82b1\u6492\u82b1 test","title":"\u6b22\u8fce\u6765\u5230Cuit-Wiki"},{"location":"Combinatorics/LGV%E5%BC%95%E7%90%86/","text":"","title":"LGV\u5f15\u7406"},{"location":"Combinatorics/min-max%E5%AE%B9%E6%96%A5/","text":"","title":"min-max\u5bb9\u65a5"},{"location":"Combinatorics/purfer%E5%BA%8F%E5%88%97/","text":"","title":"purfer\u5e8f\u5217"},{"location":"Combinatorics/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/","text":"","title":"\u4e8c\u9879\u5f0f\u53cd\u6f14"},{"location":"Combinatorics/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/","text":"","title":"\u4e8c\u9879\u5f0f\u5b9a\u7406"},{"location":"Combinatorics/%E4%BC%AF%E5%8A%AA%E5%88%A9%E6%95%B0/","text":"","title":"\u4f2f\u52aa\u5229\u6570"},{"location":"Combinatorics/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/","text":"","title":"\u5361\u7279\u5170\u6570"},{"location":"Combinatorics/%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86%E5%9F%BA%E7%A1%80/","text":"","title":"\u57fa\u7840"},{"location":"Combinatorics/%E6%8B%86%E5%88%86%E6%95%B0/","text":"","title":"\u62c6\u5206\u6570"},{"location":"Combinatorics/%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/","text":"","title":"\u6590\u6ce2\u62c9\u5951\u6570\u5217"},{"location":"Combinatorics/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/","text":"","title":"\u65af\u7279\u6797\u6570"},{"location":"Combinatorics/%E6%9D%A8%E8%A1%A8/","text":"","title":"\u6768\u8868"},{"location":"Combinatorics/%E6%A6%82%E7%8E%87%E8%AE%BA/","text":"","title":"\u6982\u7387\u8bba"},{"location":"Combinatorics/%E7%BB%84%E5%90%88%E6%95%B0/","text":"","title":"\u7ec4\u5408\u6570"},{"location":"Combinatorics/%E8%B4%9D%E5%B0%94%E6%95%B0/","text":"","title":"\u8d1d\u5c14\u6570"},{"location":"Combinatorics/%E9%94%99%E6%8E%92%E9%97%AE%E9%A2%98/","text":"","title":"\u9519\u6392\u95ee\u9898"},{"location":"Game/SG%E5%87%BD%E6%95%B0/","text":"","title":"SG\u51fd\u6570"},{"location":"Game/%E4%B8%8D%E5%B9%B3%E7%AD%89%E5%8D%9A%E5%BC%88/","text":"","title":"\u4e0d\u5e73\u7b49\u535a\u5f08"},{"location":"Game/%E5%B8%B8%E8%A7%81%E7%BB%93%E8%AE%BA/","text":"","title":"\u5e38\u89c1\u7ed3\u8bba"},{"location":"Graph/2-sat/","text":"","title":"2-sat"},{"location":"Graph/KM/","text":"","title":"KM"},{"location":"Graph/K%E7%9F%AD%E8%B7%AF/","text":"","title":"K\u77ed\u8def"},{"location":"Graph/hopcraft-karp/","text":"","title":"hopcraft-karp"},{"location":"Graph/%E4%B8%80%E8%88%AC%E5%9B%BE%E5%8C%B9%E9%85%8D/","text":"","title":"\u4e00\u822c\u56fe\u5339\u914d"},{"location":"Graph/%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%BD%91%E7%BB%9C%E6%B5%81/","text":"","title":"\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41"},{"location":"Graph/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%88%A4%E5%AE%9A/","text":"","title":"\u4e8c\u5206\u56fe\u5224\u5b9a"},{"location":"Graph/%E4%BB%99%E4%BA%BA%E6%8E%8C/","text":"","title":"\u4ed9\u4eba\u638c"},{"location":"Graph/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/","text":"","title":"\u4f20\u9012\u95ed\u5305"},{"location":"Graph/%E5%85%A8%E5%B1%80%E6%9C%80%E5%B0%8F%E5%89%B2/","text":"","title":"\u5168\u5c40\u6700\u5c0f\u5272"},{"location":"Graph/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/","text":"","title":"\u5308\u7259\u5229\u7b97\u6cd5"},{"location":"Graph/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5/","text":"","title":"\u56fe\u7684\u6982\u5ff5"},{"location":"Graph/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/","text":"","title":"\u56fe\u7684\u904d\u5386"},{"location":"Graph/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/","text":"","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"Graph/%E5%BC%A6%E5%9B%BE/","text":"","title":"\u5f26\u56fe"},{"location":"Graph/%E6%8B%93%E6%89%91%E5%BA%8F/","text":"","title":"\u62d3\u6251\u5e8f"},{"location":"Graph/%E6%94%AF%E9%85%8D%E6%A0%91/","text":"","title":"\u652f\u914d\u6811"},{"location":"Graph/%E6%96%AF%E5%9D%A6%E7%BA%B3%E6%A0%91/","text":"","title":"\u65af\u5766\u7eb3\u6811"},{"location":"Graph/%E6%9C%80%E5%A4%A7%E6%B5%81/","text":"","title":"\u6700\u5927\u6d41"},{"location":"Graph/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/","text":"","title":"\u6700\u5c0f\u6811\u5f62\u56fe"},{"location":"Graph/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"Graph/%E6%AC%A7%E6%8B%89%E8%B7%AF/","text":"","title":"\u6b27\u62c9\u8def"},{"location":"Graph/%E7%82%B9%28%E8%BE%B9%29%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/","text":"","title":"\u70b9(\u8fb9)\u53cc\u8fde\u901a\u5206\u91cf"},{"location":"Graph/%E7%AB%9E%E8%B5%9B%E5%9B%BE/","text":"","title":"\u7ade\u8d5b\u56fe"},{"location":"Graph/%E8%B4%B9%E7%94%A8%E6%B5%81/","text":"","title":"\u8d39\u7528\u6d41"},{"location":"Group/Polya%E5%AE%9A%E7%90%86/","text":"","title":"Polya\u5b9a\u7406"},{"location":"Group/burnside%E5%BC%95%E7%90%86/","text":"","title":"Burnside\u5f15\u7406"},{"location":"Group/%E7%BD%AE%E6%8D%A2/","text":"","title":"\u7f6e\u6362"},{"location":"Linear%20Algebra/BM/","text":"","title":"BM"},{"location":"Linear%20Algebra/Best%E5%AE%9A%E7%90%86/","text":"","title":"Best\u5b9a\u7406"},{"location":"Linear%20Algebra/%E5%B8%B8%E7%B3%BB%E6%95%B0%E7%BA%BF%E6%80%A7%E9%80%92%E6%8E%A8/","text":"","title":"\u5e38\u7cfb\u6570\u7ebf\u6027\u9012\u63a8"},{"location":"Linear%20Algebra/%E7%89%B9%E5%BE%81%E5%80%BC/","text":"","title":"\u7279\u5f81\u503c,\u7279\u5f81\u5411\u91cf"},{"location":"Linear%20Algebra/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/","text":"","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Linear%20Algebra/%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86/","text":"","title":"\u77e9\u9635\u6811\u5b9a\u7406"},{"location":"Linear%20Algebra/%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/","text":"","title":"\u77e9\u9635\u6c42\u9006"},{"location":"Linear%20Algebra/%E7%BA%BF%E6%80%A7%E5%9F%BA/","text":"","title":"\u7ebf\u6027\u57fa"},{"location":"Linear%20Algebra/%E8%A1%8C%E5%88%97%E5%BC%8F/","text":"","title":"\u884c\u5217\u5f0f"},{"location":"Linear%20Algebra/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/","text":"","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"Linear%20Programming/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/","text":"","title":"\u7ebf\u6027\u89c4\u5212"},{"location":"Math/Lucas/","text":"Lucas\u5b9a\u7406 \u00b6 \u9002\u7528\u6761\u4ef6\uff1an,m\u8f83\u5927\uff0cp\u4e3a\u7d20\u6570 \u516c\u5f0f\uff1a C(n,m)\\%p = C(n/p,m/p)*C(n\\%p,m\\%p)\\%p C(n,m)\\%p = C(n/p,m/p)*C(n\\%p,m\\%p)\\%p \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(f(x)+g(n)log_pn) O(f(x)+g(n)log_pn) f(x) f(x) \u4e3a\u9884\u5904\u7406\u7ec4\u5408\u6570\u7684\u590d\u6742\u5ea6\uff0cg(n)\u4e3a\u5355\u6b21\u6c42\u7ec4\u5408\u6570\u7684\u590d\u6742\u5ea6 p p \u5c0f\uff0c\u9006\u5143\u6253\u8868\uff0c O(n+p+log_p n) O(n+p+log_p n) // n n \u4e3a\u5904\u7406\u9636\u4e58\uff0c p p \u4e3a\u6253\u8868\uff0c log_p n log_p n \u4e3a\u5355\u6b21\u67e5\u8be2 p p \u5927\uff0c exgcd exgcd \u6c42\u9006\u5143, O(n+ln p*log_p n) O(n+ln p*log_p n) //n\u4e3a\u5904\u7406\u9636\u4e58\uff0c ln p*log_p n ln p*log_p n \u4e3a\u5355\u6b21\u67e5\u8be2 long long Lucas ( long long n , long long m , long long p ) { if ( m == 0 ) return 1 ; return ( C ( n % p , m % p , p ) * Lucas ( n / p , m / p , p )) % p ; } exLucas \u00b6 \u9002\u7528\u6761\u4ef6\uff1a n,m n,m \u8f83\u5927\uff0c p p \u4e0d\u4e3a\u7d20\u6570 https://www.cnblogs.com/fzl194/p/9095177.html \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(plog p) O(plog p) ll qpow ( ll base , ll exponent , ll mod ) { ll result = 1 ; for (; exponent ; base = base * base % mod , exponent >>= 1 ) { if ( exponent & 1 ) result = result * base % mod ; } return result ; } ll g ( ll n , ll p ) { if ( n < p ) return 0 ; return g ( n / p , p ) + n / p ; } ll calc ( ll n , ll p , ll MOD ) { if ( n == 0 ) return 1 ; ll res = 1 ; for ( ll i = 1 ; i <= MOD ; i ++ ) { if ( i % p ) res = res * i % MOD ; } res = qpow ( res , n / MOD , MOD ); for ( ll i = n / MOD * MOD + 1 ; i <= n ; i ++ ) { if ( i % p ) res = res * ( i % MOD ) % MOD ; } return res * calc ( n / p , p , MOD ) % MOD ; } ll exgcd ( ll a , ll b , ll & x , ll & y ) { if ( ! b ) { x = 1 , y = 0 ; return a ;} ll r = exgcd ( b , a % b , y , x ); y -= x * ( a / b ); return r ; } ll inv ( ll a , ll n ) { ll x , y ; if ( exgcd ( a , n , x , y ) == 1l l ) return ( x % n + n ) % n ; else return -1 ; } ll lucas ( ll n , ll m , ll p , ll MOD ) { ll pw = qpow ( p , g ( n , p ) - g ( m , p ) - g ( n - m , p ), MOD ); return calc ( n , p , MOD ) * inv ( calc ( m , p , MOD ), MOD ) % MOD * inv ( calc ( n - m , p , MOD ), MOD ) % MOD * pw % MOD ; } ll CRT ( const vector < ll > & a , const vector < ll > & m ) { int siz = a . size (); ll mul = 1 , sum = 0 ; for ( auto tmp : m ) mul *= tmp ; for ( int i = 0 ; i < siz ; i ++ ) { ll M = mul / m [ i ]; sum = ( sum + a [ i ] * M % mul * inv ( M , m [ i ])) % mul ; } return sum % mul ; } ll exlucas ( ll n , ll m , ll MOD ) { vector < ll > a , mod ; ll tmp = MOD ; for ( int p = 2 ; p <= tmp / p ; p ++ ) { if ( tmp % p == 0 ) { ll mul = 1 ; while ( tmp % p == 0 ) mul *= p , tmp /= p ; mod . push_back ( mul ), a . push_back ( lucas ( n , m , p , mul )); } } if ( tmp > 1 ) mod . push_back ( tmp ), a . push_back ( lucas ( n , m , tmp , tmp )); return CRT ( a , mod ); }","title":"Lucas"},{"location":"Math/Lucas/#lucas","text":"\u9002\u7528\u6761\u4ef6\uff1an,m\u8f83\u5927\uff0cp\u4e3a\u7d20\u6570 \u516c\u5f0f\uff1a C(n,m)\\%p = C(n/p,m/p)*C(n\\%p,m\\%p)\\%p C(n,m)\\%p = C(n/p,m/p)*C(n\\%p,m\\%p)\\%p \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(f(x)+g(n)log_pn) O(f(x)+g(n)log_pn) f(x) f(x) \u4e3a\u9884\u5904\u7406\u7ec4\u5408\u6570\u7684\u590d\u6742\u5ea6\uff0cg(n)\u4e3a\u5355\u6b21\u6c42\u7ec4\u5408\u6570\u7684\u590d\u6742\u5ea6 p p \u5c0f\uff0c\u9006\u5143\u6253\u8868\uff0c O(n+p+log_p n) O(n+p+log_p n) // n n \u4e3a\u5904\u7406\u9636\u4e58\uff0c p p \u4e3a\u6253\u8868\uff0c log_p n log_p n \u4e3a\u5355\u6b21\u67e5\u8be2 p p \u5927\uff0c exgcd exgcd \u6c42\u9006\u5143, O(n+ln p*log_p n) O(n+ln p*log_p n) //n\u4e3a\u5904\u7406\u9636\u4e58\uff0c ln p*log_p n ln p*log_p n \u4e3a\u5355\u6b21\u67e5\u8be2 long long Lucas ( long long n , long long m , long long p ) { if ( m == 0 ) return 1 ; return ( C ( n % p , m % p , p ) * Lucas ( n / p , m / p , p )) % p ; }","title":"Lucas\u5b9a\u7406"},{"location":"Math/Lucas/#exlucas","text":"\u9002\u7528\u6761\u4ef6\uff1a n,m n,m \u8f83\u5927\uff0c p p \u4e0d\u4e3a\u7d20\u6570 https://www.cnblogs.com/fzl194/p/9095177.html \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(plog p) O(plog p) ll qpow ( ll base , ll exponent , ll mod ) { ll result = 1 ; for (; exponent ; base = base * base % mod , exponent >>= 1 ) { if ( exponent & 1 ) result = result * base % mod ; } return result ; } ll g ( ll n , ll p ) { if ( n < p ) return 0 ; return g ( n / p , p ) + n / p ; } ll calc ( ll n , ll p , ll MOD ) { if ( n == 0 ) return 1 ; ll res = 1 ; for ( ll i = 1 ; i <= MOD ; i ++ ) { if ( i % p ) res = res * i % MOD ; } res = qpow ( res , n / MOD , MOD ); for ( ll i = n / MOD * MOD + 1 ; i <= n ; i ++ ) { if ( i % p ) res = res * ( i % MOD ) % MOD ; } return res * calc ( n / p , p , MOD ) % MOD ; } ll exgcd ( ll a , ll b , ll & x , ll & y ) { if ( ! b ) { x = 1 , y = 0 ; return a ;} ll r = exgcd ( b , a % b , y , x ); y -= x * ( a / b ); return r ; } ll inv ( ll a , ll n ) { ll x , y ; if ( exgcd ( a , n , x , y ) == 1l l ) return ( x % n + n ) % n ; else return -1 ; } ll lucas ( ll n , ll m , ll p , ll MOD ) { ll pw = qpow ( p , g ( n , p ) - g ( m , p ) - g ( n - m , p ), MOD ); return calc ( n , p , MOD ) * inv ( calc ( m , p , MOD ), MOD ) % MOD * inv ( calc ( n - m , p , MOD ), MOD ) % MOD * pw % MOD ; } ll CRT ( const vector < ll > & a , const vector < ll > & m ) { int siz = a . size (); ll mul = 1 , sum = 0 ; for ( auto tmp : m ) mul *= tmp ; for ( int i = 0 ; i < siz ; i ++ ) { ll M = mul / m [ i ]; sum = ( sum + a [ i ] * M % mul * inv ( M , m [ i ])) % mul ; } return sum % mul ; } ll exlucas ( ll n , ll m , ll MOD ) { vector < ll > a , mod ; ll tmp = MOD ; for ( int p = 2 ; p <= tmp / p ; p ++ ) { if ( tmp % p == 0 ) { ll mul = 1 ; while ( tmp % p == 0 ) mul *= p , tmp /= p ; mod . push_back ( mul ), a . push_back ( lucas ( n , m , p , mul )); } } if ( tmp > 1 ) mod . push_back ( tmp ), a . push_back ( lucas ( n , m , tmp , tmp )); return CRT ( a , mod ); }","title":"exLucas"},{"location":"Math/Miller%20Rabin/","text":"/* \u7c73\u52d2-\u62c9\u5bbe\u7d20\u6027\u68c0\u9a8c\uff08Miller\u2013Rabin primality test\uff09: https://zhuanlan.zhihu.com/p/220203643 \u8fd9\u662f\u4e00\u79cd\u6982\u7387\u7b97\u6cd5\uff0c \u4f46\u662f\uff0cJim Sinclair\u53d1\u73b0\u4e86\u4e00\u7ec4\u6570\uff1a2, 325, 9375, 28178, 450775, 9780504, 1795265022\u3002 \u7528\u5b83\u4eec\u505a a \uff0c 2^64 \u4ee5\u5185\u4e0d\u4f1a\u51fa\u9519\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u7ec4\u6570\uff0c\u5c31\u4e0d\u7528\u62c5\u5fc3\u8fd0\u6c14\u592a\u5dee\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(klog n) \u4f46\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u56fa\u5b9a\u7684\u4e00\u7ec4\u6570\uff0c\u6240\u4ee5 k=7 */ typedef unsigned long long ll; ll qpow(ll a, ll n, ll p) // \u5feb\u901f\u5e42 { ll ans = 1; while (n) { if (n & 1) ans = (__int128)ans * a % p; // \u6ce8\u610f\uff01\u4e2d\u95f4\u7ed3\u679c\u53ef\u80fd\u6ea2\u51fa\uff0c\u9700\u8981\u4f7f\u7528__int128\u8fc7\u6e21 a = (__int128)a * a % p; n >>= 1; } return ans; } bool Miller_Rabin(ll x) { if (x < 3) // \u7279\u52241\uff0c2 return x == 2; if (x % 2 == 0) // \u7279\u5224\u5076\u6570 return false; ll A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022}, d = x - 1, r = 0; while (d % 2 == 0) // \u7b97\u51fad, r d /= 2, ++r; // \u6216\uff1ar = __builtin_ctz(d), d >>= r; for (auto a : A) { ll v = qpow(a, d, x); // a^d // \u5982\u679ca^d\u22610\uff0c\u8bf4\u660e\u662fa\u662fx\u7684\u500d\u6570\uff1b\u5982\u679ca^d\u22611\u6216-1\uff0c\u8bf4\u660e\u8fd9\u4e32\u6570\u63a5\u4e0b\u6765\u4e00\u5b9a\u90fd\u662f1\uff0c\u4e0d\u7528\u7ee7\u7eed\u8ba1\u7b97 if (v <= 1 || v == x - 1) continue; for (int i = 0; i < r; ++i) { v = (__int128)v * v % x; // \u540c\u6837\u4f7f\u7528__int128\u8fc7\u6e21 if (v == x - 1 && i != r - 1) // \u5f97\u5230-1\uff0c\u8bf4\u660e\u63a5\u4e0b\u6765\u90fd\u662f1\uff0c\u53ef\u4ee5\u9000\u51fa\u4e86 { v = 1; break; } // \u5728\u4e2d\u9014\u800c\u975e\u5f00\u5934\u5f97\u52301\uff0c\u5374\u6ca1\u6709\u7ecf\u8fc7-1\uff0c\u8bf4\u660e\u5b58\u5728\u5176\u4ed6\u6570\u5b57y\u2260-1\u6ee1\u8db3y^2\u22611\uff0c\u5219x\u4e00\u5b9a\u4e0d\u662f\u5947\u7d20\u6570 if (v == 1) return false; } if (v != 1) // \u67e5\u770b\u662f\u4e0d\u662f\u4ee51\u7ed3\u5c3e return false; } return true; }","title":"Miller Rabin"},{"location":"Math/Pollard%20Rho/","text":"","title":"Pollard Rho"},{"location":"Math/gcd/","text":"","title":"gcd/lcm"},{"location":"Math/min25%E7%AD%9B/","text":"","title":"min25\u7b5b"},{"location":"Math/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/","text":"","title":"\u4e8c\u6b21\u5269\u4f59"},{"location":"Math/%E4%BD%A9%E5%B0%94%E6%96%B9%E7%A8%8B/","text":"","title":"\u4f69\u5c14\u65b9\u7a0b"},{"location":"Math/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/","text":"","title":"\u5355\u4f4d\u6839\u53cd\u6f14"},{"location":"Math/%E5%8E%9F%E6%A0%B9/","text":"","title":"\u539f\u6839"},{"location":"Math/%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B%E7%BB%84/","text":"","title":"\u540c\u4f59\u65b9\u7a0b\u7ec4"},{"location":"Math/%E5%9F%83%E6%B0%8F%E7%AD%9B/","text":"","title":"\u57c3\u6c0f\u7b5b"},{"location":"Math/%E5%BF%AB%E9%80%9F%E5%B9%82/","text":"","title":"\u5feb\u901f\u5e42"},{"location":"Math/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/","text":"","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97"},{"location":"Math/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/","text":"","title":"\u6574\u9664\u5206\u5757"},{"location":"Math/%E6%9D%9C%E6%95%99%E7%AD%9B/","text":"","title":"\u675c\u6559\u7b5b"},{"location":"Math/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/","text":"","title":"\u79bb\u6563\u5bf9\u6570"},{"location":"Math/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/","text":"","title":"\u7c7b\u6b27\u51e0\u91cc\u5f97"},{"location":"Math/%E7%BA%BF%E6%80%A7%E7%AD%9B/","text":"","title":"\u7ebf\u6027\u7b5b"},{"location":"Math/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/","text":"","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570"},{"location":"Math/%E8%BF%AA%E5%88%A9%E5%85%8B%E9%9B%B7%E5%8D%B7%E7%A7%AF/","text":"","title":"\u8fea\u5229\u514b\u96f7\u5377\u79ef"},{"location":"Math/%E9%80%86%E5%85%83/","text":"","title":"\u9006\u5143"},{"location":"Polynomial/FFT/","text":"","title":"FFT/NTT"},{"location":"Polynomial/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%85%A8%E5%AE%B6%E6%A1%B6/","text":"","title":"\u591a\u9879\u5f0f\u5168\u5bb6\u6876"},{"location":"Polynomial/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/","text":"","title":"\u62c9\u683c\u6717\u65e5\u63d2\u503c"},{"location":"Polynomial/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/","text":"","title":"\u751f\u6210\u51fd\u6570"},{"location":"Polynomial/%E9%9B%86%E5%90%88%E5%B9%82%E7%BA%A7%E6%95%B0/","text":"","title":"\u96c6\u5408\u5e42\u7ea7\u6570"},{"location":"String/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"","title":"AC\u81ea\u52a8\u673a"},{"location":"String/Lyndon%E5%88%86%E8%A7%A3/","text":"","title":"Lyndon\u5206\u89e3"},{"location":"String/kmp/","text":"","title":"kmp"},{"location":"String/manacher/","text":"","title":"manacher"},{"location":"String/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/","text":"","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"String/%E5%90%8E%E7%BC%80%E6%A0%91/","text":"","title":"\u540e\u7f00\u6811"},{"location":"String/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"String/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"","title":"\u56de\u6587\u81ea\u52a8\u673a"},{"location":"String/%E5%AD%97%E5%85%B8%E6%A0%91/","text":"","title":"\u5b57\u5178\u6811"},{"location":"String/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84hash/","text":"","title":"\u5b57\u7b26\u4e32\u7684hash"},{"location":"String/%E6%89%A9%E5%B1%95kmp/","text":"","title":"\u6269\u5c55kmp"},{"location":"String/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/","text":"","title":"\u6700\u5c0f\u8868\u793a\u6cd5"},{"location":"datastructure/DSU/","text":"","title":"DSU"},{"location":"datastructure/KD%E6%A0%91/","text":"","title":"KD\u6811"},{"location":"datastructure/LCT/","text":"","title":"LCT"},{"location":"datastructure/RMQ/","text":"\u57fa\u672c\u4fe1\u606f \u00b6 st\u8868\u662f\u7528\u6765\u89e3\u51b3\u533a\u95f4\u6700\u5927\u6700\u5c0f\u503c\u7684\u95ee\u9898\u7684\uff0c\u6b64\u95ee\u9898\u5982\u679c\u5229\u7528\u5e38\u89c4\u601d\u8def\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u662fO(N ^ 2)\uff0c\u800c\u4f7f\u7528st\u8868\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728 O(NlgN) \u9884\u5904\u7406\uff0c O(1) \u67e5\u8be2\uff0c\u5feb\u7684\u4e0d\u662f\u4e00\u70b9\u534a\u70b9\u3002\u4ed6\u548c lca \u5176\u5b9e\u662f\u4e00\u4e2a\u601d\u8def\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\uff0c\u50a8\u5b58\u5176\u540e\u9762 2^n \u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u76f4\u63a5\u67e5\u8be2\u5373\u53ef\u3002 \u8be6\u7ec6\u77e5\u8bc6 \u00b6 \u9884\u5904\u7406 \u00b6 \u6211\u4eec\u5efa\u7acb\u4e00\u4e2a MAX[maxn][21] \u6570\u7ec4\u6765\u50a8\u5b58\u4ee5\u5f53\u524d\u6570\u7ec4\u4e3a\u8d77\u70b9\u7684\uff0c\u8fde\u7eed 2^n \u7684\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d MAX[maxn][0] \u5373\u4e3a 2 ^ 0 = 1 \u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u5373\u6570\u5b57\u672c\u8eab\u3002 \u7136\u540e\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u5c06 MAX\u6570\u7ec4 \u5904\u7406\u3002 int MAX [ maxn ][ 21 ]; inline void init ( int n ){ for ( int j = 1 ; j <= 21 ; j ++ ){ for ( int i = 1 ; i + ( 1 << j ) - 1 < n ; i ++ ){ MAX [ i ][ j ] = max ( MAX [ i ][ j -1 ], MAX [ i + ( 1 << ( j -1 ))][ j -1 ]); } } } \u8fd9\u4e2a\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u7528\u4e0b\u9762\u8fd9\u4e2a\u56fe\u6765\u89e3\u91ca \u6574\u6bb5\u7684\u6700\u5927\u503c\u662f\u5de6\u53f3\u4e24\u6bb5\u5176\u4e2d\u4e4b\u4e00\u7684\u6700\u5927\u503c\u3002 \u67e5\u8be2 \u00b6 \u67e5\u8be2\u548c\u4e0a\u9762\u7684\u601d\u8def\u4e00\u6837\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u627e\u51fa\u6765\u4e86\u4ee5\u6bcf\u4e2a\u6570\u5b57\u4e3a\u8d77\u70b9\uff0c\u957f\u5ea6\u4e3a 2^n \u7684\u5e8f\u5217\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6574\u4e2a\u533a\u95f4\u5206\u6210\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\u96c6\u5373\u53ef\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e24\u4e2a\u5c0f\u533a\u95f4\u4e00\u5b9a\u5305\u542b\u4e86\u5168\u90e8\u533a\u95f4\uff0c\u4e24\u4e2a\u5c0f\u533a\u95f4\u9700\u8981\u5c3d\u91cf\u5927\uff0c\u6700\u597d\u662f\u90fd\u662f 2^n \u957f\u3002 int lg [ maxn ]; //\u9884\u5148\u8ba1\u7b97lg\uff0c\u5982\u679c\u89c9\u5f97\u9ebb\u70e6\u53ef\u4ee5\u76f4\u63a5\u7528log2()\u51fd\u6570 int query ( int l , int r ){ int m = lg [ l - r + 1 ] - 1 ; //\u4f7f\u7528\u4e0elca\u540c\u6837\u7684\u65b9\u6cd5\u5c06\u5168\u90e8\u7684lg\u7b97\u51fa\u6765\uff0c\u51cf\u5c0f\u5e38\u6570\uff0c\u6ce8\u610f\u6709\u504f\u79fb\u8981\u51cf\u56de\u6765 return max ( MAX [ l ][ m ], MAX [ r - ( 1 << m ) + 1 ][ m ]); } for ( int i = 1 ; i < n ; i ++ ){ lg [ i ] = lg [ i -1 ] + ( 1 << lg [ i - 1 ] == i ); //\u504f\u79fb\u4e861\uff0c } \u533a\u95f4\u957f\u5ea6\u4e3a 2 ^ m \u957f\uff0c\u8fd9\u662f [L,r] \u5185\u6700\u957f\u7684\u6b21\u65b9\u6570\uff0c\u4e5f\u662f\u6700\u957f\u7684 2^n \u957f\u5ea6\u3002 \u6a21\u677f\u9898\u4ee3\u7801 \u00b6 P3865 \u3010\u6a21\u677f\u3011ST \u8868 #include <iostream> #include <cstdio> #include <algorithm> using namespace std ; const int maxn = 1e5 + 5 ; int f [ maxn ][ 21 ]; int lg [ maxn ]; inline void init ( int n ){ for ( int i = 1 ; i <= n ; i ++ ){ lg [ i ] = lg [ i -1 ] + ( 1 << lg [ i -1 ] == i ); } for ( int j = 1 ; j <= 21 ; j ++ ){ for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i ++ ){ f [ i ][ j ] = max ( f [ i ][ j -1 ], f [ i + ( 1 << ( j - 1 ))][ j -1 ]); } } } inline int query ( int l , int r ){ int mid = lg [ r - l + 1 ] - 1 ; return max ( f [ l ][ mid ], f [ r - ( 1 << mid ) + 1 ][ mid ]); } signed main ( void ){ int n , m ; scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & f [ i ][ 0 ]); init ( n ); for ( int i = 1 ; i <= m ; i ++ ){ int l , r ; scanf ( \"%d %d\" , & l , & r ); printf ( \"%d \\n \" , query ( l , r )); } return 0 ; }","title":"RMQ"},{"location":"datastructure/RMQ/#_1","text":"st\u8868\u662f\u7528\u6765\u89e3\u51b3\u533a\u95f4\u6700\u5927\u6700\u5c0f\u503c\u7684\u95ee\u9898\u7684\uff0c\u6b64\u95ee\u9898\u5982\u679c\u5229\u7528\u5e38\u89c4\u601d\u8def\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u662fO(N ^ 2)\uff0c\u800c\u4f7f\u7528st\u8868\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728 O(NlgN) \u9884\u5904\u7406\uff0c O(1) \u67e5\u8be2\uff0c\u5feb\u7684\u4e0d\u662f\u4e00\u70b9\u534a\u70b9\u3002\u4ed6\u548c lca \u5176\u5b9e\u662f\u4e00\u4e2a\u601d\u8def\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\uff0c\u50a8\u5b58\u5176\u540e\u9762 2^n \u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u76f4\u63a5\u67e5\u8be2\u5373\u53ef\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"datastructure/RMQ/#_2","text":"","title":"\u8be6\u7ec6\u77e5\u8bc6"},{"location":"datastructure/RMQ/#_3","text":"\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a MAX[maxn][21] \u6570\u7ec4\u6765\u50a8\u5b58\u4ee5\u5f53\u524d\u6570\u7ec4\u4e3a\u8d77\u70b9\u7684\uff0c\u8fde\u7eed 2^n \u7684\u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d MAX[maxn][0] \u5373\u4e3a 2 ^ 0 = 1 \u8303\u56f4\u5185\u7684\u6700\u5927\u503c\uff0c\u5373\u6570\u5b57\u672c\u8eab\u3002 \u7136\u540e\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u5c06 MAX\u6570\u7ec4 \u5904\u7406\u3002 int MAX [ maxn ][ 21 ]; inline void init ( int n ){ for ( int j = 1 ; j <= 21 ; j ++ ){ for ( int i = 1 ; i + ( 1 << j ) - 1 < n ; i ++ ){ MAX [ i ][ j ] = max ( MAX [ i ][ j -1 ], MAX [ i + ( 1 << ( j -1 ))][ j -1 ]); } } } \u8fd9\u4e2a\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u7528\u4e0b\u9762\u8fd9\u4e2a\u56fe\u6765\u89e3\u91ca \u6574\u6bb5\u7684\u6700\u5927\u503c\u662f\u5de6\u53f3\u4e24\u6bb5\u5176\u4e2d\u4e4b\u4e00\u7684\u6700\u5927\u503c\u3002","title":"\u9884\u5904\u7406"},{"location":"datastructure/RMQ/#_4","text":"\u67e5\u8be2\u548c\u4e0a\u9762\u7684\u601d\u8def\u4e00\u6837\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u627e\u51fa\u6765\u4e86\u4ee5\u6bcf\u4e2a\u6570\u5b57\u4e3a\u8d77\u70b9\uff0c\u957f\u5ea6\u4e3a 2^n \u7684\u5e8f\u5217\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6574\u4e2a\u533a\u95f4\u5206\u6210\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\u96c6\u5373\u53ef\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e24\u4e2a\u5c0f\u533a\u95f4\u4e00\u5b9a\u5305\u542b\u4e86\u5168\u90e8\u533a\u95f4\uff0c\u4e24\u4e2a\u5c0f\u533a\u95f4\u9700\u8981\u5c3d\u91cf\u5927\uff0c\u6700\u597d\u662f\u90fd\u662f 2^n \u957f\u3002 int lg [ maxn ]; //\u9884\u5148\u8ba1\u7b97lg\uff0c\u5982\u679c\u89c9\u5f97\u9ebb\u70e6\u53ef\u4ee5\u76f4\u63a5\u7528log2()\u51fd\u6570 int query ( int l , int r ){ int m = lg [ l - r + 1 ] - 1 ; //\u4f7f\u7528\u4e0elca\u540c\u6837\u7684\u65b9\u6cd5\u5c06\u5168\u90e8\u7684lg\u7b97\u51fa\u6765\uff0c\u51cf\u5c0f\u5e38\u6570\uff0c\u6ce8\u610f\u6709\u504f\u79fb\u8981\u51cf\u56de\u6765 return max ( MAX [ l ][ m ], MAX [ r - ( 1 << m ) + 1 ][ m ]); } for ( int i = 1 ; i < n ; i ++ ){ lg [ i ] = lg [ i -1 ] + ( 1 << lg [ i - 1 ] == i ); //\u504f\u79fb\u4e861\uff0c } \u533a\u95f4\u957f\u5ea6\u4e3a 2 ^ m \u957f\uff0c\u8fd9\u662f [L,r] \u5185\u6700\u957f\u7684\u6b21\u65b9\u6570\uff0c\u4e5f\u662f\u6700\u957f\u7684 2^n \u957f\u5ea6\u3002","title":"\u67e5\u8be2"},{"location":"datastructure/RMQ/#_5","text":"P3865 \u3010\u6a21\u677f\u3011ST \u8868 #include <iostream> #include <cstdio> #include <algorithm> using namespace std ; const int maxn = 1e5 + 5 ; int f [ maxn ][ 21 ]; int lg [ maxn ]; inline void init ( int n ){ for ( int i = 1 ; i <= n ; i ++ ){ lg [ i ] = lg [ i -1 ] + ( 1 << lg [ i -1 ] == i ); } for ( int j = 1 ; j <= 21 ; j ++ ){ for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i ++ ){ f [ i ][ j ] = max ( f [ i ][ j -1 ], f [ i + ( 1 << ( j - 1 ))][ j -1 ]); } } } inline int query ( int l , int r ){ int mid = lg [ r - l + 1 ] - 1 ; return max ( f [ l ][ mid ], f [ r - ( 1 << mid ) + 1 ][ mid ]); } signed main ( void ){ int n , m ; scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & f [ i ][ 0 ]); init ( n ); for ( int i = 1 ; i <= m ; i ++ ){ int l , r ; scanf ( \"%d %d\" , & l , & r ); printf ( \"%d \\n \" , query ( l , r )); } return 0 ; }","title":"\u6a21\u677f\u9898\u4ee3\u7801"},{"location":"datastructure/bitset/","text":"","title":"bitset"},{"location":"datastructure/map/","text":"","title":"map"},{"location":"datastructure/multiset/","text":"","title":"multiset"},{"location":"datastructure/pair/","text":"","title":"pair"},{"location":"datastructure/pbds/","text":"","title":"pbds"},{"location":"datastructure/priority_queue/","text":"","title":"priority_queue"},{"location":"datastructure/set/","text":"","title":"set"},{"location":"datastructure/vector/","text":"","title":"vector"},{"location":"datastructure/%E5%88%86%E5%9D%97/","text":"","title":"\u5206\u5757"},{"location":"datastructure/%E5%A0%86/","text":"","title":"\u5806"},{"location":"datastructure/%E5%B9%B3%E8%A1%A1%E6%A0%91/","text":"","title":"\u5e73\u8861\u6811"},{"location":"datastructure/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"datastructure/%E6%A0%88/","text":"","title":"\u6808"},{"location":"datastructure/%E6%A0%91%E5%A5%97%E6%A0%91/","text":"","title":"\u6811\u5957\u6811"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","text":"\u57fa\u7840\u77e5\u8bc6 \u00b6 \u6811\u72b6\u6570\u7ec4\u662f\u7528\u6765\u89e3\u51b3\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u7684\u95ee\u9898\u7684\u3002 \u5982\u679c\u4f7f\u7528\u4e00\u822c\u65b9\u6cd5\uff0c\u6328\u4e2a\u4fee\u6539\uff0c\u6328\u4e2a\u6c42\u548c\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(N) \uff0c\u5982\u679c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4fee\u6539\u548c\u6c42\u548c\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u90fd\u662f O(logN) \uff0c\u6bd4\u4f20\u7edf\u6570\u7ec4\u90fd\u5feb\uff0c\u4e5f\u6bd4\u8f83\u7b80\u6d01\u3002\u4f46\u662f\u6811\u72b6\u6570\u7ec4\u9047\u5230\u590d\u6742\u7684\u533a\u95f4\u95ee\u9898\u5c31\u4f1a\u975e\u5e38\u9ebb\u70e6\uff0c\u6b64\u65f6\u5c31\u6539\u7528\u5176\u4ed6\u65b9\u6cd5\u3002 \u6811\u72b6\u6570\u7ec4\u7684\u8282\u70b9\u50a8\u5b58\u7684\u662f\u4e00\u5b9a\u8303\u56f4\u5185\u6570\u503c\u7684\u548c\uff01 \u4f8b\u5982\u4e0a\u56fe\uff0c A\u6570\u7ec4 \u4e3a\u539f\u6570\u7ec4\uff0c T\u6570\u7ec4 \u624d\u4e3a\u6811\u72b6\u6570\u7ec4\u3002\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u7684\u662f\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u548c\u3002 \u8be6\u7ec6\u77e5\u8bc6 \u00b6 lowbit \u00b6 lowbit\u51fd\u6570 \u53ef\u4ee5\u8bf4\u662f\u5929\u751f\u4e3a\u6811\u72b6\u6570\u7ec4\u800c\u751f\u7684\uff0c\u4ed6\u5341\u5206\u9ad8\u6548\uff0c\u5c06\u6811\u72b6\u6570\u7ec4\u62c6\u5206\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u67e5\u627e\u524d7\u4e2a\u6570\u7684\u548c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u80af\u5b9a\u662f\u4f9d\u6b21\u52a0\uff0c\u52a07\u6b21\u3002\u800c\u6570\u72b6\u6570\u7ec4\u7684\u601d\u60f3\u5219\u662f\u5bf97\u672c\u8eab\u52a8\u624b\u30027\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u4e3a0111\uff0c\u901a\u8fc7 lowbit\u51fd\u6570 \uff0c\u6211\u4eec\u53ef\u4ee5\u5c060111\u62c6\u5206\u4e3a0100\uff0c0110\uff0c0111\uff0c\u521a\u597d\u5bf9\u5e94\u7684\u5c31\u662f\u4e0a\u56fe\u7684T[4],T[6],T[7]\uff0c\u52a0\u8d77\u6765\u521a\u597d\u5c31\u662f\u524d7\u4e2a\u6570\u7684\u548c\u3002\u90a3\u4e48\u600e\u4e48\u62c6\u5206\u5462\uff1f\u8fd9\u5c31\u662f lowbit\u51fd\u6570 \u8981\u505a\u7684\u3002 lowbit\u51fd\u6570 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u975e\u8d1f\u6574\u6570n\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u4f4e\u4e3a1\u53ca\u5176\u540e\u9762\u76840\u6784\u6210\u7684\u6570\uff0c\u542c\u8d77\u6765\u5f88\u6655\u662f\u4e0d\u662f\u3002\u770b\u4e0b\u9762\u8fd9\u4e2a\u6817\u5b50\u5c31\u77e5\u9053\u4e86\u3002 12 = (1100) 2 \uff0c\u6700\u4f4e\u4e3a1\u53ca\u5176\u540e\u9762\u76840\u6784\u6210\u7684\u6570\u5373\u662f4 = (100) 2 \uff0c lowbit(12) = 4 \u3002\u4e0e\u539f\u6765\u768412\u76f8\u51cf\uff0c12\u5c31\u88ab\u62c6\u6210(1000) 2 \u4e0e(0100) 2 \u4e86\u3002 int lowbit ( int x ){ return x & ( - x ); } \u533a\u95f4\u67e5\u8be2 \u00b6 \u5982\u4e0a\u4e2a\u4f8b\u5b50\u6240\u8bf4\uff0c\u6211\u4eec\u8981\u67e5\u627e\u524d7\u4e2a\u6570\u7684\u548c\uff0csum[7] = T[7] + T[6] + T[4]\u3002\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 6 = 7 - lowbit(7) \uff0c 4 = 6 - lowbit(6) \uff0c\u800c\u4e144 - lowbit(4)\u521a\u597d\u7b49\u4e8e0\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5faa\u73af\u4f9d\u6b21\u6765\u51cf\u53bb\u4ed6\u7684lowbit\u5373\u53ef\u5f97\u5230\u62c6\u5206\u540e\u7684\u5e8f\u5217\uff0c\u7136\u540e\u76f8\u52a0\u5373\u53ef\u3002\u5999\u54c9\u5999\u54c9\uff01 int add ( int x ){ int sum = 0 ; for ( int i = x ; i ; i -= lowbit ( i )){ sum += T [ i ]; } return sum ; } \u5982\u679c\u8bf4\u5bf9\u4e8e\u67d0\u4e2a\u533a\u95f4\u7684\u6c42\u548c\uff0c\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u5bf9\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u4f9d\u6b21\u6c42\u548c\uff0c\u7136\u540e\u76f8\u51cf\uff0cover\u3002 int add ( int l , int r ){ int sum1 = 0 ; int sum2 = 0 ; for ( int i = l -1 ; i ; i -= lowbit ( i )){ sum1 += T [ i ]; } for ( int i = r ; i ; i = lowbit ( i )){ sum2 += T [ i ]; } return sum2 - sum1 ; } \u5355\u70b9\u4fee\u6539 \u00b6 \u5bf9\u4e8e\u67d0\u4e2a\u6570\u5b57\u8981\u4fee\u6539\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5176\u7236\u4eb2\u8282\u70b9\u4e00\u8d77\u4fee\u6539\u3002 \u8fd8\u662f\u7528\u8fd9\u4e2a\u56fe\uff0c\u5982\u679c\u6211\u4eec\u8981\u4fee\u6539A[3]\u7684\u503c\uff0c\u90a3\u4e48T[3]\uff0cT[4]\uff0cT[8]\u90fd\u8981\u4fee\u6539\u3002\u90a3\u4e48\u600e\u4e48\u4ece3\u5f97\u52304\u548c8\u5462\uff0c\u4e07\u80fd\u7684lowbit\u53c8\u767b\u573a\u8fa3\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c 4 = 3 + lowbit(3) \uff0c 8 = 4 + lowbit(4) \uff0c\u4e00\u76f4\u5230\u8d85\u51fa\u8303\u56f4\u518d\u505c\u6b62\uff0c\u5999\u86d9\uff0c\u4e00\u4e2a\u5faa\u73af\u53c8\u641e\u5b9a\u4e86\u3002 void change ( int x , int k ){ for ( int i = x ; i <= n ; i += lowbit ( i )){ T [ i ] += k ; } } \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u00b6 \u533a\u95f4\u4fee\u6539\u6ca1\u6cd5\u4e86\uff0c\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u4fee\u6539\u8fd9\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u90a3\u5c31\u4e70\u4e2a\u6302\u5427\uff0c\u5bf9\u4e8e\u533a\u95f4\u4fee\u6539\u7279\u522b\u662f\u591a\u6b21\u7684\u533a\u95f4\u4fee\u6539\uff0c\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5dee\u5206\u3002\u90a3\u4e48ok\uff0c\u90a3\u6211\u4eec\u5c31\u521b\u5efa\u4e00\u4e2a\u5dee\u5206\u7684\u6811\u72b6\u6570\u7ec4\u5457\uff0c\u8fd9\u4e0d\u5c31\u641e\u5b9a\u4e86\u5417\u3002 void update ( int pos , int k ){ for ( int i = pos ; i <= n ; i += lowbit ( i )){ c [ i ] += k ; } } update ( l , k ); update ( r + 1 , - k ); \u7136\u540e\u518d\u5bf9\u5dee\u5206\u6570\u7ec4\u6c42\u548c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u7279\u70b9\u561b\u3002 int add ( int pos ){ int sum = 0 ; for ( int i = pos ; i ; i -= lowbit ( i )){ sum += c [ i ]; } } \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u00b6 \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7528\u7ebf\u6bb5\u6811\u53cd\u800c\u66f4\u597d\u89e3\u51b3\u3002 \u5efa\u7acb\u6811\u72b6\u6570\u7ec4 \u00b6 \u8bf4\u534a\u5929\u53d1\u73b0\u6ca1\u6709\u8bf4\u600e\u4e48\u5efa\u7acbT\u6570\u7ec4\u3002 \u5efa\u7acb\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u5c06\u770b\u4f5c\u5143\u7d20\u4e3a0\u7684\u5355\u70b9\u4fee\u6539\u3002 void change ( int x , int k ){ for ( int i = x ; i <= n ; i += lowbit ( i )){ T [ i ] += k ; } } int main ( void ){ ...... for ( int i = 1 ; i <= n ; i ++ ){ cin >> a [ i ]; change ( i , a [ i ]); } ...... }","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_1","text":"\u6811\u72b6\u6570\u7ec4\u662f\u7528\u6765\u89e3\u51b3\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u7684\u95ee\u9898\u7684\u3002 \u5982\u679c\u4f7f\u7528\u4e00\u822c\u65b9\u6cd5\uff0c\u6328\u4e2a\u4fee\u6539\uff0c\u6328\u4e2a\u6c42\u548c\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(N) \uff0c\u5982\u679c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4fee\u6539\u548c\u6c42\u548c\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u90fd\u662f O(logN) \uff0c\u6bd4\u4f20\u7edf\u6570\u7ec4\u90fd\u5feb\uff0c\u4e5f\u6bd4\u8f83\u7b80\u6d01\u3002\u4f46\u662f\u6811\u72b6\u6570\u7ec4\u9047\u5230\u590d\u6742\u7684\u533a\u95f4\u95ee\u9898\u5c31\u4f1a\u975e\u5e38\u9ebb\u70e6\uff0c\u6b64\u65f6\u5c31\u6539\u7528\u5176\u4ed6\u65b9\u6cd5\u3002 \u6811\u72b6\u6570\u7ec4\u7684\u8282\u70b9\u50a8\u5b58\u7684\u662f\u4e00\u5b9a\u8303\u56f4\u5185\u6570\u503c\u7684\u548c\uff01 \u4f8b\u5982\u4e0a\u56fe\uff0c A\u6570\u7ec4 \u4e3a\u539f\u6570\u7ec4\uff0c T\u6570\u7ec4 \u624d\u4e3a\u6811\u72b6\u6570\u7ec4\u3002\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u7684\u662f\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u548c\u3002","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_2","text":"","title":"\u8be6\u7ec6\u77e5\u8bc6"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#lowbit","text":"lowbit\u51fd\u6570 \u53ef\u4ee5\u8bf4\u662f\u5929\u751f\u4e3a\u6811\u72b6\u6570\u7ec4\u800c\u751f\u7684\uff0c\u4ed6\u5341\u5206\u9ad8\u6548\uff0c\u5c06\u6811\u72b6\u6570\u7ec4\u62c6\u5206\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u67e5\u627e\u524d7\u4e2a\u6570\u7684\u548c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u80af\u5b9a\u662f\u4f9d\u6b21\u52a0\uff0c\u52a07\u6b21\u3002\u800c\u6570\u72b6\u6570\u7ec4\u7684\u601d\u60f3\u5219\u662f\u5bf97\u672c\u8eab\u52a8\u624b\u30027\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u4e3a0111\uff0c\u901a\u8fc7 lowbit\u51fd\u6570 \uff0c\u6211\u4eec\u53ef\u4ee5\u5c060111\u62c6\u5206\u4e3a0100\uff0c0110\uff0c0111\uff0c\u521a\u597d\u5bf9\u5e94\u7684\u5c31\u662f\u4e0a\u56fe\u7684T[4],T[6],T[7]\uff0c\u52a0\u8d77\u6765\u521a\u597d\u5c31\u662f\u524d7\u4e2a\u6570\u7684\u548c\u3002\u90a3\u4e48\u600e\u4e48\u62c6\u5206\u5462\uff1f\u8fd9\u5c31\u662f lowbit\u51fd\u6570 \u8981\u505a\u7684\u3002 lowbit\u51fd\u6570 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u975e\u8d1f\u6574\u6570n\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u4f4e\u4e3a1\u53ca\u5176\u540e\u9762\u76840\u6784\u6210\u7684\u6570\uff0c\u542c\u8d77\u6765\u5f88\u6655\u662f\u4e0d\u662f\u3002\u770b\u4e0b\u9762\u8fd9\u4e2a\u6817\u5b50\u5c31\u77e5\u9053\u4e86\u3002 12 = (1100) 2 \uff0c\u6700\u4f4e\u4e3a1\u53ca\u5176\u540e\u9762\u76840\u6784\u6210\u7684\u6570\u5373\u662f4 = (100) 2 \uff0c lowbit(12) = 4 \u3002\u4e0e\u539f\u6765\u768412\u76f8\u51cf\uff0c12\u5c31\u88ab\u62c6\u6210(1000) 2 \u4e0e(0100) 2 \u4e86\u3002 int lowbit ( int x ){ return x & ( - x ); }","title":"lowbit"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_3","text":"\u5982\u4e0a\u4e2a\u4f8b\u5b50\u6240\u8bf4\uff0c\u6211\u4eec\u8981\u67e5\u627e\u524d7\u4e2a\u6570\u7684\u548c\uff0csum[7] = T[7] + T[6] + T[4]\u3002\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 6 = 7 - lowbit(7) \uff0c 4 = 6 - lowbit(6) \uff0c\u800c\u4e144 - lowbit(4)\u521a\u597d\u7b49\u4e8e0\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u5faa\u73af\u7ed3\u675f\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5faa\u73af\u4f9d\u6b21\u6765\u51cf\u53bb\u4ed6\u7684lowbit\u5373\u53ef\u5f97\u5230\u62c6\u5206\u540e\u7684\u5e8f\u5217\uff0c\u7136\u540e\u76f8\u52a0\u5373\u53ef\u3002\u5999\u54c9\u5999\u54c9\uff01 int add ( int x ){ int sum = 0 ; for ( int i = x ; i ; i -= lowbit ( i )){ sum += T [ i ]; } return sum ; } \u5982\u679c\u8bf4\u5bf9\u4e8e\u67d0\u4e2a\u533a\u95f4\u7684\u6c42\u548c\uff0c\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u5bf9\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u4f9d\u6b21\u6c42\u548c\uff0c\u7136\u540e\u76f8\u51cf\uff0cover\u3002 int add ( int l , int r ){ int sum1 = 0 ; int sum2 = 0 ; for ( int i = l -1 ; i ; i -= lowbit ( i )){ sum1 += T [ i ]; } for ( int i = r ; i ; i = lowbit ( i )){ sum2 += T [ i ]; } return sum2 - sum1 ; }","title":"\u533a\u95f4\u67e5\u8be2"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_4","text":"\u5bf9\u4e8e\u67d0\u4e2a\u6570\u5b57\u8981\u4fee\u6539\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5176\u7236\u4eb2\u8282\u70b9\u4e00\u8d77\u4fee\u6539\u3002 \u8fd8\u662f\u7528\u8fd9\u4e2a\u56fe\uff0c\u5982\u679c\u6211\u4eec\u8981\u4fee\u6539A[3]\u7684\u503c\uff0c\u90a3\u4e48T[3]\uff0cT[4]\uff0cT[8]\u90fd\u8981\u4fee\u6539\u3002\u90a3\u4e48\u600e\u4e48\u4ece3\u5f97\u52304\u548c8\u5462\uff0c\u4e07\u80fd\u7684lowbit\u53c8\u767b\u573a\u8fa3\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c 4 = 3 + lowbit(3) \uff0c 8 = 4 + lowbit(4) \uff0c\u4e00\u76f4\u5230\u8d85\u51fa\u8303\u56f4\u518d\u505c\u6b62\uff0c\u5999\u86d9\uff0c\u4e00\u4e2a\u5faa\u73af\u53c8\u641e\u5b9a\u4e86\u3002 void change ( int x , int k ){ for ( int i = x ; i <= n ; i += lowbit ( i )){ T [ i ] += k ; } }","title":"\u5355\u70b9\u4fee\u6539"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_5","text":"\u533a\u95f4\u4fee\u6539\u6ca1\u6cd5\u4e86\uff0c\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u4fee\u6539\u8fd9\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u90a3\u5c31\u4e70\u4e2a\u6302\u5427\uff0c\u5bf9\u4e8e\u533a\u95f4\u4fee\u6539\u7279\u522b\u662f\u591a\u6b21\u7684\u533a\u95f4\u4fee\u6539\uff0c\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u5dee\u5206\u3002\u90a3\u4e48ok\uff0c\u90a3\u6211\u4eec\u5c31\u521b\u5efa\u4e00\u4e2a\u5dee\u5206\u7684\u6811\u72b6\u6570\u7ec4\u5457\uff0c\u8fd9\u4e0d\u5c31\u641e\u5b9a\u4e86\u5417\u3002 void update ( int pos , int k ){ for ( int i = pos ; i <= n ; i += lowbit ( i )){ c [ i ] += k ; } } update ( l , k ); update ( r + 1 , - k ); \u7136\u540e\u518d\u5bf9\u5dee\u5206\u6570\u7ec4\u6c42\u548c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u7279\u70b9\u561b\u3002 int add ( int pos ){ int sum = 0 ; for ( int i = pos ; i ; i -= lowbit ( i )){ sum += c [ i ]; } }","title":"\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_6","text":"\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7528\u7ebf\u6bb5\u6811\u53cd\u800c\u66f4\u597d\u89e3\u51b3\u3002","title":"\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2"},{"location":"datastructure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_7","text":"\u8bf4\u534a\u5929\u53d1\u73b0\u6ca1\u6709\u8bf4\u600e\u4e48\u5efa\u7acbT\u6570\u7ec4\u3002 \u5efa\u7acb\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u5c06\u770b\u4f5c\u5143\u7d20\u4e3a0\u7684\u5355\u70b9\u4fee\u6539\u3002 void change ( int x , int k ){ for ( int i = x ; i <= n ; i += lowbit ( i )){ T [ i ] += k ; } } int main ( void ){ ...... for ( int i = 1 ; i <= n ; i ++ ){ cin >> a [ i ]; change ( i , a [ i ]); } ...... }","title":"\u5efa\u7acb\u6811\u72b6\u6570\u7ec4"},{"location":"datastructure/%E6%A0%91%E7%9A%84%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/","text":"","title":"\u6811\u7684\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"datastructure/%E6%A0%91%E7%9A%84%E5%93%88%E5%B8%8C/","text":"","title":"\u6811\u7684\u54c8\u5e0c"},{"location":"datastructure/%E6%A0%91%E7%9A%84%E5%9F%BA%E7%A1%80/","text":"","title":"\u6811\u7684\u57fa\u7840"},{"location":"datastructure/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/","text":"","title":"\u6811\u94fe\u5256\u5206"},{"location":"datastructure/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/","text":"","title":"\u7b1b\u5361\u5c14\u6811"},{"location":"datastructure/%E7%BA%BF%E6%AE%B5%E6%A0%91/","text":"","title":"\u7ebf\u6bb5\u6811"},{"location":"datastructure/%E8%99%9A%E6%A0%91/","text":"","title":"\u865a\u6811"},{"location":"datastructure/%E9%93%BE%E8%A1%A8/","text":"","title":"\u94fe\u8868"},{"location":"datastructure/%E9%98%9F%E5%88%97/","text":"","title":"\u961f\u5217"},{"location":"dp/dp%E4%BC%98%E5%8C%96/","text":"","title":"dp\u4f18\u5316"},{"location":"dp/%E5%85%B6%E4%BB%96dp/","text":"","title":"\u5176\u4ed6dp"},{"location":"dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/","text":"","title":"\u52a8\u6001\u89c4\u5212\u57fa\u7840"},{"location":"dp/%E5%8C%BA%E9%97%B4dp/","text":"","title":"\u533a\u95f4dp"},{"location":"dp/%E6%95%B0%E4%BD%8Ddp/","text":"","title":"\u6570\u4f4ddp"},{"location":"dp/%E6%A0%91%E5%BD%A2dp/","text":"","title":"\u6811\u5f62dp"},{"location":"dp/%E6%A6%82%E7%8E%87dp/","text":"","title":"\u6982\u7387dp"},{"location":"dp/%E7%8A%B6%E5%8E%8Bdp/","text":"","title":"\u72b6\u538bdp"},{"location":"dp/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","text":"","title":"\u80cc\u5305\u95ee\u9898"},{"location":"dp/%E8%AE%A1%E6%95%B0dp/","text":"","title":"\u8ba1\u6570dp"},{"location":"dp/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/","text":"","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"}]}